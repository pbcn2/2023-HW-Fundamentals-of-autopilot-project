%% File : car_fast_sfunc.tlc
%% Created : Sat Jun 10 19:35:12 2023
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "car_fast_sfunc.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  car_fast_sfunc "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "car_fast_sfunc_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void car_fast_sfunc_Start_wrapper_accel(%<realType> *xC);
    SFB_EXTERN_C void car_fast_sfunc_Outputs_wrapper_accel(const %<realType> *disturbance,
			const %<realType> *throttle_delta,
			%<realType> *y0,
			const %<realType> *xC);
    SFB_EXTERN_C void car_fast_sfunc_Derivatives_wrapper_accel(const %<realType> *disturbance,
			const %<realType> *throttle_delta,
			%<realType> *y0,
			%<realType> *dx,
			%<realType> *xC);
    SFB_EXTERN_C void car_fast_sfunc_Terminate_wrapper_accel(%<realType> *xC);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "car_fast_sfunc_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void car_fast_sfunc_Start_wrapper(%<realType> *xC);
    extern void car_fast_sfunc_Outputs_wrapper(const %<realType> *disturbance,
			const %<realType> *throttle_delta,
			%<realType> *y0,
			const %<realType> *xC);
    extern void car_fast_sfunc_Terminate_wrapper(%<realType> *xC);

    extern void car_fast_sfunc_Derivatives_wrapper(const %<realType> *disturbance,
			const %<realType> *throttle_delta,
			%<realType> *y0,
			%<realType> *dx,
			%<realType> *xC);
    void car_fast_sfunc_Start_wrapper_accel(%<realType> *xC){
    car_fast_sfunc_Start_wrapper(xC);
    }
    void car_fast_sfunc_Outputs_wrapper_accel(const %<realType> *disturbance,
			const %<realType> *throttle_delta,
			%<realType> *y0,
			const %<realType> *xC){
    car_fast_sfunc_Outputs_wrapper(disturbance,
			throttle_delta,
			y0,
			xC);
    }

    void car_fast_sfunc_Derivatives_wrapper_accel(const %<realType> *disturbance,
			const %<realType> *throttle_delta,
			%<realType> *y0,
			%<realType> *dx,
			%<realType> *xC){
    car_fast_sfunc_Derivatives_wrapper(disturbance,
			throttle_delta,
			y0,
			dx,
			xC);
    }
    void car_fast_sfunc_Terminate_wrapper_accel(%<realType> *xC){
    car_fast_sfunc_Terminate_wrapper(xC);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>

  %else
  %openfile externs

    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif

    SFB_EXTERN_C void car_fast_sfunc_Start_wrapper(%<realType> *xC);

    SFB_EXTERN_C void car_fast_sfunc_Outputs_wrapper(const %<realType> *disturbance,
			const %<realType> *throttle_delta,
			%<realType> *y0,
			const %<realType> *xC);
    SFB_EXTERN_C void car_fast_sfunc_Derivatives_wrapper(const %<realType> *disturbance,
			const %<realType> *throttle_delta,
			%<realType> *y0,
			%<realType> *dx,
			%<realType> *xC);

    SFB_EXTERN_C void car_fast_sfunc_Terminate_wrapper(%<realType> *xC);

    #undef SFB_EXTERN_C
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction

%% InitializeConditions =========================================================
%%
%function InitializeConditions(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
  /* %<Type> Block: %<Name> */

{
  %<realType> *xC = &%<LibBlockContinuousState("", "", 0)>;

  xC[0] = 0.8;
  xC[1] = 0.8;
  xC[2] = 0;
  xC[3] = 0;
  xC[4] = 0;
  xC[5] = 0;
  xC[6] = 0;
  xC[7] = 0;
}

%endfunction

%% Function: Start ============================================================
%%
%function Start(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
   /* %<Type> Block: %<Name> */
  {
    
    %<realType> *pxc = &%<LibBlockContinuousState("", "", 0)>;
    
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    car_fast_sfunc_Start_wrapper_accel(pxc);
  %else
    car_fast_sfunc_Start_wrapper(pxc);
  %endif

  }
%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
  %%
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  {
    
    %<realType> *pxc = &%<LibBlockContinuousState("", "", 0)>;
    
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    car_fast_sfunc_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<py0>, pxc);
  %else
    car_fast_sfunc_Outputs_wrapper(%<pu0>, %<pu1>, %<py0>, pxc);
  %endif

  }
  %%
%endfunction

%% Function: Derivatives ======================================================
%% Abstract:
%%      Derivatives
%%
%function Derivatives(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    /* S-Function "car_fast_sfunc_wrapper" Block: %<Name> */
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  {
    
    %<realType> *pxc = &%<LibBlockContinuousState("", "", 0)>;
    %<realType> *dx  = &%<LibBlockContinuousStateDerivative("", "", 0)>;
      %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    car_fast_sfunc_Derivatives_wrapper_accel(%<pu0>, %<pu1>, %<py0>, dx, pxc);
  %else
    car_fast_sfunc_Derivatives_wrapper(%<pu0>, %<pu1>, %<py0>, dx, pxc);
  %endif

  }
  %%
%endfunction
%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
    %assign realType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
   /* %<Type> Block: %<Name> */
  {
    
    %<realType> *pxc = &%<LibBlockContinuousState("", "", 0)>;
    
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    car_fast_sfunc_Terminate_wrapper_accel(pxc);
  %else
    car_fast_sfunc_Terminate_wrapper(pxc);
  %endif

  }
%endfunction

%% [EOF] car_fast_sfunc.tlc

